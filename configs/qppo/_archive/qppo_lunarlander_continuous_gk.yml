type:                        QRL                   # choose a type: RL, GA, Hypernetwork, ...
alg:                         QPPO                  # name of the algorithm
use_ray_alg:                 False                 # use custom algorithm or ray framework
seed:                        42                   # seed for ray alogorithms/tensorflow/pytorch for reproduceabel results

mode:                        training             # select the mode you want to use: 'custom', 'training'
trainer:                     default
checkpoint_at_end:           False
checkpoint_freq:             100
ray_local_mode:              False                # set local_mode of ray to True for debugging
load_path:                   some/path/weights    # provide a model weight path if you want to do continue from stopped training

ray_logging_path:            logs/qppo/lunarlander/10_24     # logging directory
total_num_cpus:              24                  # total number of cpus
total_num_gpus:              0                   # total number of gpus
ray_num_trial_samples:       5                    # number of hyperparameter combinations (trials) to run (works differently for grid_search)
training_iterations:         200                  # number of training iterations

env_type:                    gym_game
env:                         LunarLander-v2
env_config:
  mode:                      classical          
  norm: False         


# Additional custom parameters
# withOUT rescaling of critic 
algorithm_config:
  reuse_actors:               True
  num_gpus:                   0                   # number of gpus for each trial
  num_rollout_workers:        4                   # number of worker for each trial. By ray default, every worker needs one cpu
  num_envs_per_worker:        1                   # number of game enviroments for each worker
  num_gpus_per_worker:        0                   # number of worker for each trial.
  num_cpus_per_worker:        0.25                   # number of worker for each trial.
  constant_seed:              False 
  framework:                  torch
  ###########################################################################
  lr:                          0.0001
    # - grid_search
    # - float
    # - [0.001, 0.0001] 
  # lr_output_scaling:          0.01
    # - grid_search
    # - [0.075, 0.005]  
  # lr_schedule: [[0, 0.97], [300000, 0.091]]
    # - grid_search
    # - string
    # - [[[0, 0.97], [300000, 0.091]],
    #    [[0, 0.98], [200000, 0.091]], 
    #    [[0, 0.99], [100000, 0.091]]]
  #   - grid_search
  #   - [[[0, 0.001], [600000, 0.0001]],
  #      [[0, 0.001], [300000, 0.0001]],
  #      [[0, 0.0005], [600000, 0.0001]],
  #      [[0, 0.0005], [300000, 0.0001]]]
  num_layers: 5
    # - grid_search
    # - int
    # - [9, 11, 13, 15]       
  # blocks_actor:               [[0, 1, 2, 3], 
  #                              [4, 5, 6]]
  # blocks_critic:               [[0, 1, 2, 3], 
  #                              [4], [5], [6]]

  # blocks: 
  #   - grid_search 
  #   - string
  #   - [
  #     [[[0, 1], [2, 3], [4, 5]], [[0, 1], [2, 3], [4, 5]]],
  #     [[[0, 1], [2], [3]], [[0, 1], [2], [3]]]
  #     ]
    # - grid_search
    # - string
    # - [ 
    #   [[[0, 1, 2, 3], [4, 5, 6]], [[0, 1, 2, 3], [4], [5], [6]]],
    #   [[[0, 1], [2, 3, 4, 5, 6]], [[0, 1, 2, 3], [4], [5], [6]]],
    #   [[[0, 1, 2, 3], [4, 5, 6]], [[0, 1], [2, 3, 4], [5], [6]]],
    #   [[[0, 1], [2, 3, 4, 5, 6]], [[0, 1], [2, 3, 4], [5], [6]]],
    # ]

    # - grid_search    
    # - [3, 5]
  # weight_decay: 0.00001 #1.0e-4
  #   - grid_search
  #   - [1.0e-4, 1.0e-5]
  ###########################################################################
  mode:                       classical # classical, quantum, hybrid
  interface:                  torch
  diff_method:                adjoint                             
  backend_name:               lightning.qubit
  custom_optimizer:           Adam #Adam   
    # - grid_search
    # - [Adam, RMSprop]
  ###########################################################################
  vqc_type:                   [vqc_generator, 6] #qcnn_circuit_lunar #circuit_lunar_short #vqc_generator #circuit_lunar_short #
    # - grid_search
    # - string
    # - [['pooling_lunar_01', 6], ['pooling_lunar_01', 8], ['pooling_lunar_02', 6], ['pooling_lunar_02', 8]]
  use_single_vqc:             False
    # - grid_search
    # - [True, False]
  use_hadamard:               True
  block_sequence:             enc_var_ent
  encoding_type:              angular_classical_qubit # layerwise_arctan_sigmoid #angular_classical
    # - grid_search
    # - string
    # - [angular_classical_qubit, angular_arctan, angular_arctan_ext, angular_sigmoid, angular_sigmoid_ext]
  use_input_scaling:          True
  num_scaling_params:         2
  entangling_type:            chain
    # - grid_search
    # - [chain_reverse, chain]
  entangling_gate:            CNOT
  variational_type:           RZ_RY
  num_variational_params:     2
  measurement_type_actor:     exp
    # - grid_search
    # - string
    # - [exp_@_exp+exp, exp]             # type of measurement (check the python files for examples) (exp for discrete) exp_@_exp+exp
  measurement_type_critic:    exp 
    # - grid_search
    # - string
    # - [exp0, exp, jerbi_6]
  use_output_scaling_actor:   True
  init_output_scaling_actor:  [1.]
  use_output_scaling_critic:  True                     # Uses output scaling  
  init_output_scaling_critic: [1.] 
  postprocessing_actor:       1
  postprocessing_critic:      weighted_sum # WITHOUT BAIS NOW #weighted_sum # relu # weighted_sum
  ###########################################################################
  init_params:                0.1 
  init_params_mode:           plus-zero-normal    # plus-zero-uniform #, plus-plus-normal. plus-zero-normal
  layerwise_training:         False
  gradient_clipping:          False
  use_classical_layer:        False
  # normalize_batch:
  #   - grid_search
  #   - [True, False]
  layer_size:         [64, 64]
    # - grid_search
    # - list
    # # - [[8], [16], [32], [64], [8, 8], [16, 16], [32, 32], [64, 64], [8, 16], [8, 32], [8, 64], [16, 32], [16, 64], [32, 64]]
    # - [[8,8], [16, 16], [32, 32], [64, 64]]
  activation_function:       relu  
    # - grid_search
    # - string
    # - [relu, leaky_relu, tanh]   
  weight_logging_interval:    10000
  weight_plotting:            True
  ###########################################################################
  train_batch_size:           4000
  num_sgd_iter:               10
  sgd_minibatch_size:         64
  rollout_fragment_length:    200 #200
  gamma:                      0.99
  lambda:                     0.99
  # kl_coeff:                   1.
  vf_loss_coeff:              0.5
  clip_param:                 0.2
  # grad_clip:                  3
  vf_clip_param:              100
  # batch_mode:                 complete_episodes
  # observation_filter:         MeanStdFilter